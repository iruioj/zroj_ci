"""
The state board comment
"""

from rich import print
import os
from github.PullRequest import PullRequest
from github.Commit import Commit
from dataclasses import dataclass
import re
import subprocess

_board_template = """<!-- {meta} -->
# Pull Request Status

**Automatically generated by ZROJ-bot, DO NOT EDIT.**

compare {cur_commit} with {old_commit}:

{report}
"""


@dataclass
class Status:
    cur_commit: str
    old_commit: str

    def render_report(self, report: str):
        return _board_template.format(
            meta=str(self),
            cur_commit=self.cur_commit,
            old_commit=self.old_commit,
            report=report,
        )


def try_parse_comment(body: str):
    """
    try to parse metadata. raise error if not successful.
    """
    m = re.search("<!-- (.*?) -->", body)
    obj = eval(m.group(1))
    if isinstance(obj, Status):
        return obj
    else:
        raise "invalid meta"


class Integrator:
    def __init__(
        self,
        working_dir: str = ".work",
        ci_tool_dir: str = "../ci_tool",
        force=False,
    ) -> None:
        self.force = force
        self.working_dir = working_dir
        os.makedirs(working_dir, exist_ok=True)
        url = "https://github.com/iruioj/zroj_core.git"
        self.repo_dir = os.path.join(working_dir, "zroj_core")

        # you may execute the clone command manually for bad networking
        if not os.path.exists(self.repo_dir):
            subprocess.run(["git", "clone", url, self.repo_dir])

        print(f"... git fetch --all")
        subprocess.run(["git", "fetch", "--all"], cwd=self.repo_dir)

        # build the ci tool binary
        self.ci_tool_path = os.path.join(
            self.working_dir, "target", "release", "ci_tool"
        )
        if not os.path.exists(self.ci_tool_path):
            subprocess.run(
                ["cargo", "build", "--release"],
                cwd=ci_tool_dir,
                env={
                    "CARGO_TARGET_DIR": os.path.join(self.working_dir, "target"),
                    **os.environ,
                },
            )

    def get_ci_report(self, status: Status):
        print(f"... run ci_tool")
        res = subprocess.run(
            [
                self.ci_tool_path,
                "-w",
                self.repo_dir,
                "-b",
                status.old_commit,
                status.cur_commit,
            ],
            env={
                "CARGO_TARGET_DIR": os.path.join(self.working_dir, "target"),
                **os.environ,
            },
            capture_output=True,
        )
        content = res.stdout.decode()
        err = res.stderr.decode()
        if res.returncode != 0:
            print("... [red]error![/red]")
            content += f"\nError:\n\n```\n{err}\n```\n"
        return content

    def update_pr(self, pr: PullRequest, compare_base: Commit):
        # get previous status
        status = None
        comment_id = None
        for c in pr.get_issue_comments():
            try:
                status = try_parse_comment(c.body)
                comment_id = c.id
                print(f"... find comment {comment_id}")
                break
            except:
                continue

        # get last commit
        last_sha = pr.head.sha

        if (
            self.force
            or status is None
            or status.old_commit != compare_base.sha
            or status.cur_commit != last_sha
        ):
            new_status = Status(cur_commit=last_sha, old_commit=compare_base.sha)
            try:
                report = new_status.render_report(self.get_ci_report(new_status))
            except Exception as e:
                report = new_status.render_report(str(e))

            print(f"... update comment {comment_id}")
            # update comment
            if comment_id is None:
                comment = pr.create_issue_comment(report)
            else:
                comment = pr.get_issue_comment(comment_id)
                comment.edit(report)
